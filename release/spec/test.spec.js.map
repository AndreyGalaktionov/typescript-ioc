{"version":3,"sources":["spec/test.ts"],"names":[],"mappings":"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","file":"test.spec.js","sourcesContent":["/// <reference path=\"../../typings/index.d.ts\" />\n\nimport * as IoC from \"../typescript-ioc\";\nimport \"reflect-metadata\";\n\ndescribe(\"@Inject annotation on a property\", () => {\n\n\t@IoC.AutoWired\n\tclass SimppleInject {\n\t\t@IoC.Inject\n\t\tdateProperty: Date;\n\t}\n\n    it(\"should inject a new value on the property field\", () => {\n        const instance: SimppleInject = new SimppleInject();\n        expect(instance.dateProperty).toBeDefined();\n    });\n});\n\ndescribe(\"@Inject annotation on Constructor parameter\", () => {\n\n\tconst constructorsArgs: Array<any> = new Array<any>();\n\tconst constructorsMultipleArgs: Array<any> = new Array<any>();\n\n\t@IoC.AutoWired\n\tclass TesteConstructor {\n\t\tconstructor( @IoC.Inject date: Date) {\n\t\t\tconstructorsArgs.push(date);\n\t\t\tthis.injectedDate = date;\n\t\t}\n\t\tinjectedDate: Date;\n\t}\n\n\t@IoC.AutoWired\n\tclass TesteConstructor2 {\n\t\t@IoC.Inject\n\t\tteste1: TesteConstructor;\n\t}\n\n    it(\"should inject a new value as argument on cosntrutor call, when parameter is not provided\", () => {\n        const instance: TesteConstructor2 = new TesteConstructor2();\n        expect(constructorsArgs.length).toEqual(1);\n        expect(instance.teste1.injectedDate).toBeDefined();\n    });\n\n    it(\"should not inject a new value as argument on cosntrutor call, when parameter is provided\", () => {\n        const myDate: Date = new Date(1);\n        const instance: TesteConstructor = new TesteConstructor(myDate);\n        expect(instance.injectedDate).toEqual(myDate);\n    });\n\n\t@IoC.AutoWired\n\tclass aaaa { }\n\t@IoC.AutoWired\n\tclass bbbb { }\n\t@IoC.AutoWired\n\tclass cccc { }\n\n\t@IoC.AutoWired\n\tclass dddd {\n\t\tconstructor( @IoC.Inject a: aaaa, @IoC.Inject b: bbbb, @IoC.Inject c: cccc) {\n\t\t\tconstructorsMultipleArgs.push(a);\n\t\t\tconstructorsMultipleArgs.push(b);\n\t\t\tconstructorsMultipleArgs.push(c);\n\t\t}\n\t}\n    it(\"should inject multiple arguments on construtor call in correct order\", () => {\n        const instance: dddd = IoC.Container.get(dddd);\n        expect(constructorsMultipleArgs[0]).toBeDefined();\n        expect(constructorsMultipleArgs[1]).toBeDefined();\n        expect(constructorsMultipleArgs[2]).toBeDefined();\n        expect(constructorsMultipleArgs[0].constructor).toEqual(aaaa);\n        expect(constructorsMultipleArgs[1].constructor).toEqual(bbbb);\n        expect(constructorsMultipleArgs[2].constructor).toEqual(cccc);\n\t});\t\n});\n\ndescribe(\"Inheritance on autowired types\", () => {\n\tconst constructorsCalled: Array<string> = new Array<string>();\n\n\tinterface TesteInterface {\n\t\tproperty1: Date;\n\t}\n\n\t@IoC.AutoWired\n\tclass TesteAbstract implements TesteInterface {\n\t\tconstructor() {\n\t\t\tconstructorsCalled.push('TesteAbstract');\n\t\t}\n\t\tbbb: Date;\n\n\t\t@IoC.Inject\n\t\tproperty1: Date;\n\t}\n\n\t@IoC.AutoWired\n\tclass Teste1 extends TesteAbstract {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tconstructorsCalled.push('Teste1');\n\t\t}\n\t\tproper1: string = \"Property\";\n\n\t\t@IoC.Inject\n\t\tproperty2: Date;\n\t}\n\n\t@IoC.AutoWired\n\tclass Teste2 extends Teste1 {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tconstructorsCalled.push('Teste2');\n\t\t}\n\t\tabc: number = 123;\n\t}\n\n    it(\"should inject all fields from all types and call all constructors\", () => {\n        const instance: Teste2 = new Teste2();\n        expect(constructorsCalled).toEqual(['TesteAbstract', 'Teste1', 'Teste2']);\n        expect(instance.property1).toBeDefined();\n        expect(instance.property2).toBeDefined();\n    });\n});\n\ndescribe(\"Custom scopes for autowired types\", () => {\n\tconst scopeCreations: Array<any> = new Array<any>();\n\n\tclass MyScope extends IoC.Scope {\n\t\tresolve(provider: IoC.Provider, source: Function) {\n\t\t\tlet result = provider.get();\n\t\t\tscopeCreations.push(result);\n\t\t\treturn result;\n\t\t}\n\t}\n\t\n\t@IoC.AutoWired\n\t@IoC.Scoped(new MyScope())\n\tclass ScopedTeste {\n\t\tconstructor() {\n\t\t}\n\t}\n\n\t@IoC.AutoWired\n\tclass ScopedTeste2 {\n\t\tconstructor() {\n\t\t}\n\t\t@IoC.Inject\n\t\tteste1: ScopedTeste;\n\t}\n\n    it(\"should inject all fields from all types and call all constructors\", () => {\n        let instance: ScopedTeste2 = new ScopedTeste2();\n        expect(instance).toBeDefined();\n        expect(scopeCreations.length).toEqual(1);\n        expect(scopeCreations[0]).toEqual(instance.teste1);\n    });\n});\n\ndescribe(\"Provider for autowired types\", () => {\n\tconst providerCreations: Array<any> = new Array<any>();\n\n\tconst provider: IoC.Provider = {\n\t\tget: () => {\n\t\t\tconst result = new ProvidedTeste(); \n\t\t\tproviderCreations.push(result);\n\t\t\treturn result; \n\t\t}\n\t}\n\n\t@IoC.AutoWired\n\t@IoC.Singleton\n\t@IoC.Provided(provider)\n\tclass ProvidedTeste {\n\t\tconstructor() {\n\t\t}\n\t}\n\n\t@IoC.AutoWired\n\tclass ProvidedTeste2 {\n\t\tconstructor() {\n\t\t}\n\t\t@IoC.Inject\n\t\tteste1: ProvidedTeste;\n\t}\n\n    it(\"should inject all fields from all types using a provider to instantiate\", () => {\n        let instance: ProvidedTeste2 = new ProvidedTeste2();\n        expect(instance).toBeDefined();\n        expect(providerCreations.length).toEqual(1);\n        expect(providerCreations[0]).toEqual(instance.teste1);\n    });\n});\n\ndescribe(\"Default Implementation class\", () => {\n\tclass BaseClass {\n\t}\n\n\t@IoC.AutoWired\n\t@IoC.Provides(BaseClass)\n\tclass ImplementationClass implements BaseClass{\n\t\t@IoC.Inject\n\t\ttestProp: Date;\n\t}\n\n    it(\"should inform Container that it is the implementation for its base type\", () => {\n        let instance: BaseClass = IoC.Container.get(BaseClass);\n        const test = instance['testProp']\n        expect(test).toBeDefined();\n    });\n});\n\ndescribe(\"The IoC Container.bind(source)\", () => {\n\n\tclass ContainerInjectTest {\n\t\t@IoC.Inject\n\t\tdateProperty: Date;\n\t}\n\n\tIoC.Container.bind(ContainerInjectTest);\n\n    it(\"should inject internal fields of non AutoWired classes, if it is requested to the Container\", () => {\n        const instance: ContainerInjectTest = IoC.Container.get(ContainerInjectTest);\n        expect(instance.dateProperty).toBeDefined();\n    });\n\n    it(\"should not inject internal fields of non AutoWired classes, if it is created by its constructor\", () => {\n        const instance: ContainerInjectTest = new ContainerInjectTest();\n        expect(instance.dateProperty).toBeUndefined();\n    });\n});\n\ndescribe(\"The IoC Container.get(source)\", () => {\n\n\tclass ContainerInjectConstructorTest {\n\t\tconstructor( @IoC.Inject date: Date) {\n\t\t\tthis.injectedDate = date;\n\t\t}\n\t\tinjectedDate: Date;\n\t}\n\n\tIoC.Container.bind(ContainerInjectConstructorTest);\n\n    it(\"should inject internal fields of non AutoWired classes, if it is requested to the Container\", () => {\n        const instance: ContainerInjectConstructorTest = IoC.Container.get(ContainerInjectConstructorTest);\n        expect(instance.injectedDate).toBeDefined();\n    });\n});\n\ndescribe(\"The IoC Container\", () => {\n\n\t@IoC.AutoWired\n\t@IoC.Singleton\n\tclass SingletonInstantiation {\n\t}\n\n\t@IoC.AutoWired\n\tclass ContainerSingletonInstantiation {\n\t}\n\tIoC.Container.bind(ContainerSingletonInstantiation)\n\t\t\t\t .to(ContainerSingletonInstantiation)\n\t\t\t\t .scope(IoC.Scope.Singleton);\n\n    it(\"should not allow instantiations of Singleton classes.\", () => {\n\t\texpect(function() { new SingletonInstantiation(); })\n\t\t\t.toThrow(new TypeError(\"Can not instantiate Singleton class. Ask Container for it, using Container.get\"));\n    });\n\n    it(\"should be able to work with Config.scope() changes.\", () => {\n\t\texpect(function() { new ContainerSingletonInstantiation(); })\n\t\t\t.toThrow(new TypeError(\"Can not instantiate Singleton class. Ask Container for it, using Container.get\"));\n    });\n\n    it(\"should allow Container instantiation of Singleton classes.\", () => {\n\t\tconst instance: SingletonInstantiation = IoC.Container.get(SingletonInstantiation);\n\t\texpect(instance).toBeDefined();\n    });\n\n    it(\"should allow scope change to Local from Singleton.\", () => {\n\t\tconst instance: SingletonInstantiation = IoC.Container.get(SingletonInstantiation);\n\t\texpect(instance).toBeDefined();\n\t\tIoC.Container.bind(SingletonInstantiation).scope(IoC.Scope.Local);\n\t\tconst instance2: SingletonInstantiation = new SingletonInstantiation();\n\t\texpect(instance2).toBeDefined();\n    });\n});\n"]}