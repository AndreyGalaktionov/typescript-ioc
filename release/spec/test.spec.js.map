{"version":3,"sources":["spec/test.ts"],"names":[],"mappings":"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","file":"test.spec.js","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\n\nimport * as IoC from \"../typescript-ioc\";\nimport \"reflect-metadata\";\n\ndescribe(\"Simple Field injection of a no autowired type\", () => {\n\n\t@IoC.AutoWired\n\tclass SimppleInject {\n\t\t@IoC.Inject\n\t\tdateProperty: Date;\n\t}\n\n    it(\"should inject a simple date field\", () => {\n        const instance: SimppleInject = new SimppleInject();\n        expect(instance.dateProperty).toBeDefined();\n    });\n});\n\ndescribe(\"Inheritance on autowired types\", () => {\n\tconst constructorsCalled: Array<string> = new Array<string>();\n\n\tinterface TesteInterface {\n\t\tproperty1: Date;\n\t}\n\n\t@IoC.AutoWired\n\tclass TesteAbstract implements TesteInterface {\n\t\tconstructor() {\n\t\t\tconstructorsCalled.push('TesteAbstract');\n\t\t}\n\t\tbbb: Date;\n\n\t\t@IoC.Inject\n\t\tproperty1: Date;\n\t}\n\n\t@IoC.AutoWired\n\tclass Teste1 extends TesteAbstract {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tconstructorsCalled.push('Teste1');\n\t\t}\n\t\tproper1: string = \"Property\";\n\n\t\t@IoC.Inject\n\t\tproperty2: Date;\n\t}\n\n\t@IoC.AutoWired\n\tclass Teste2 extends Teste1 {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tconstructorsCalled.push('Teste2');\n\t\t}\n\t\tabc: number = 123;\n\t}\n\n    it(\"should inject all fields from all types and call all constructors\", () => {\n        const instance: Teste2 = new Teste2();\n        expect(constructorsCalled).toEqual(['TesteAbstract', 'Teste1', 'Teste2']);\n        expect(instance.property1).toBeDefined();\n        expect(instance.property2).toBeDefined();\n    });\n});\n\ndescribe(\"Simple Constructor parameter injection\", () => {\n\n\tconst constructorsArgs: Array<any> = new Array<any>();\n\n\t@IoC.AutoWired\n\tclass TesteConstructor {\n\t\tconstructor( @IoC.Inject date: Date) {\n\t\t\tconstructorsArgs.push(date);\n\t\t}\n\t}\n\n\t@IoC.AutoWired\n\tclass TesteConstructor2 {\n\t\t@IoC.Inject\n\t\tteste1: TesteConstructor;\n\t}\n\n    it(\"should inject a date as argument on cosntrutor call, when parameter is not provided\", () => {\n        const instance: TesteConstructor2 = new TesteConstructor2();\n        expect(constructorsArgs.length).toEqual(1);\n    });\n});\n\n\ndescribe(\"Custom scopes for autowired types\", () => {\n\tconst scopeCreations: Array<any> = new Array<any>();\n\n\tclass MyScope extends IoC.Scope {\n\t\tresolve(provider: IoC.Provider, source: Function) {\n\t\t\tlet result = provider.get();\n\t\t\tscopeCreations.push(result);\n\t\t\treturn result;\n\t\t}\n\t}\n\t\n\t@IoC.AutoWired\n\t@IoC.Scoped(new MyScope())\n\tclass ScopedTeste {\n\t\tconstructor() {\n\t\t}\n\t}\n\n\t@IoC.AutoWired\n\tclass ScopedTeste2 {\n\t\tconstructor() {\n\t\t}\n\t\t@IoC.Inject\n\t\tteste1: ScopedTeste;\n\t}\n\n    it(\"should inject all fields from all types and call all constructors\", () => {\n        let instance: ScopedTeste2 = new ScopedTeste2();\n        expect(instance).toBeDefined();\n        expect(scopeCreations.length).toEqual(1);\n        expect(scopeCreations[0]).toEqual(instance.teste1);\n    });\n});\n\ndescribe(\"Provider for autowired types\", () => {\n\tconst providerCreations: Array<any> = new Array<any>();\n\n\tconst provider: IoC.Provider = {\n\t\tget: () => {\n\t\t\tconst result = new ProvidedTeste(); \n\t\t\tproviderCreations.push(result);\n\t\t\treturn result; \n\t\t}\n\t}\n\n\t@IoC.AutoWired\n\t@IoC.Singleton\n\t@IoC.Provided(provider)\n\tclass ProvidedTeste {\n\t\tconstructor() {\n\t\t}\n\t}\n\n\t@IoC.AutoWired\n\tclass ProvidedTeste2 {\n\t\tconstructor() {\n\t\t}\n\t\t@IoC.Inject\n\t\tteste1: ProvidedTeste;\n\t}\n\n    it(\"should inject all fields from all types using a provider to instantiate\", () => {\n        let instance: ProvidedTeste2 = new ProvidedTeste2();\n        expect(instance).toBeDefined();\n        expect(providerCreations.length).toEqual(1);\n        expect(providerCreations[0]).toEqual(instance.teste1);\n    });\n});\n"]}